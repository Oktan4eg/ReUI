import styled, { CSSProperties } from 'styled-components';
import { FC, ReactNode, Fragment } from 'react';

type TextTags = 'div' | 'span' | 'p' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'; // –ù—É–∂–Ω—ã –ª–∏ –≤–æ–æ–±—â–µ H2-6?
type TextSizes = 'display' | 'heading' | 'title' | 'label' | 'body' | 'ligal' | 'button';
type TextScale = 'xl' | 'lg' | 'md' | 'sm';
type TextWeight = 'extraLight' | 'light' | 'regular' | 'medium' | 'semiBold' | 'bold' | 'extraBold' | 'black';
type TextFont = 'display' | 'body' | 'monospace';
type TextAlign = 'left' | 'right' | 'center' | 'justify';

export interface TextProps {
  /** –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç */
  children?: ReactNode;

  /** –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è. <br/> C–∏–Ω—Ç–∞–∫—Å–∏—Å –≤–Ω—É—Ç—Ä–∏ storybook: <br/> üëâ "color": "green" */
  style?: CSSProperties;

  /** –¢–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ `display` ‚Äî Roboto  `body` ‚Äî Inter  `monospace` ‚Äî SFMono-Medium */
  font?: TextFont;

  /** –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ */
  scale?: TextScale;

  /** –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ */
  size?: TextSizes;

  /** –ù–∞—á–µ—Ä—Ç–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */
  weight?: TextWeight;

  /** –í—ã–∫–ª—é—á–∫–∞ —Ç–µ–∫—Å—Ç–∞ */
  align?: TextAlign;

  /** –£–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–≥ html-—Ä–∞–∑–º–µ—Ç–∫–∏ */
  as?: TextTags;

  /** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å */
  className?: string;

  /** –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é block, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî inline */
  inline?: boolean;

  /** –°–æ–±—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É*/
  onClick?: React.MouseEventHandler;

  // fill?: boolean; // üî¥ ‚Äî –î–æ–¥–µ–ª–∞—Ç—å.

  /** üî¥ ‚Äî –î–æ–¥–µ–ª–∞—Ç—å. <br/> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–≤—è–∑–∫–µ —Å overflow) */
  maxLines?: 1; // –¥–æ–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫—Ä—ã–∏—Ç–∏—è —Å—Ç—Ä–æ–∫–∏
  /** üî¥ ‚Äî –î–æ–¥–µ–ª–∞—Ç—å. <br/> –ó–∞–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */
  overflow?: 'fade' | 'ellipsis' | 'fade-horizontal';
}

const StyledText = styled(Fragment)<TextProps>`
  display: ${(props) => (props.inline ? 'inline' : 'block')};

  ${(props) =>
    props.weight &&
    `     
    font-weight: ${props.theme.font.weight[props.weight]};                        
    `};
  ${(props) =>
    props.size &&
    props.scale &&
    `
    font-size: ${props.theme.font.size[props.size][props.scale]};
    line-height: ${props.theme.font.height[props.size][props.scale]};                  
    `};
  ${(props) =>
    props.font &&
    `
    font-family: ${props.theme.font.family[props.font]};
    `};
  ${(props) =>
    props.align &&
    `
     text-align: ${props.align};
    `}
`;

export const Text: FC<TextProps> = ({
  scale = 'lg',
  size = 'heading',
  weight = 'regular',
  font = 'body',
  children = '–Ø —Ç–µ–∫—Å—Ç',
  as = 'p',
  align = 'left',
  className,
  style,
  inline,
  onClick,
}): JSX.Element => {
  return (
    <StyledText
      onClick={onClick}
      scale={scale}
      size={size}
      weight={weight}
      font={font}
      align={align}
      as={as}
      inline={inline}
      className={className}
      style={style}
    >
      {children}
    </StyledText>
  );
};
